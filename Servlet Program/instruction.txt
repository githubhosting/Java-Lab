
Certainly! Here are the steps to run a servlet program in Eclipse with Apache Tomcat:

Add Tomcat Server to Eclipse:

Go to Windows > Preferences > Server > Runtime Environments.
Click Add to configure a new Apache Tomcat server (version 10.1 or 10).
Check the option to Create a new local server.
Set the Tomcat installation directory (e.g., C:\Program Files\Apache Software Foundation\Tomcat 10.1).
Start Tomcat Server:

In the bottom pane of Eclipse, right-click on the server and select Start.
If the server doesn't start, double-click on it and change the admin port from 8005 to 8006.
Create a New Dynamic Web Project:

Ensure Target runtime is set to Apache Tomcat.
Check the option to Generate web.xml deployment descriptor.
Add Servlet API to Build Path:

Right-click on the project, go to Build Path > Configure Build Path.
Under Modulepath, click Add External JARs.
Navigate to the Tomcat lib directory and select the servlet-api.jar.
Create a Servlet:

Right-click on the project, go to New > Servlet.
Set the Class name to match the Java file name.
Only doPost and doGet methods should be checked.
Use jakarta.servlet instead of javax.servlet for Tomcat 10.1 compatibility.
Run the Servlet:

Right-click on the Java file, select Run As > Run on Server.
Choose the configured Tomcat server.
Click Next, then Finish.
If necessary, restart the server.
Create HTML File:

Place the HTML file under the webapp directory.
In the form action within the HTML code, set action="check" to match the servlet URL pattern.
Save Java File:

Ensure the Java servlet file is saved within the Java folder of the project structure.
Modify web.xml:

Locate the web.xml file under WEB-INF within the webapp directory.
Switch to the Source tab to edit the code.
Add servlet and servlet-mapping configurations.
The servlet name and servlet class should match the Java class name.
Set the URL pattern to /check.
Restart the Server:

If you made changes to web.xml or the servlet code, restart the Tomcat server to apply the changes.